"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6123],{28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>c});var t=i(96540);const o={},r=t.createContext(o);function s(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(r.Provider,{value:n},e.children)}},99472:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"writing-integrations/integrations-code-execution","title":"Running code in an integration","description":"Understand how ToolJump executes integration code, including security considerations, runtime environment, and best practices for code execution.","source":"@site/docs/writing-integrations/integrations-code-execution.md","sourceDirName":"writing-integrations","slug":"/writing-integrations/integrations-code-execution","permalink":"/docs/writing-integrations/integrations-code-execution","draft":false,"unlisted":false,"editUrl":"https://github.com/tooljump/tooljump/tree/main/docs/docs/writing-integrations/integrations-code-execution.md","tags":[],"version":"current","frontMatter":{"id":"integrations-code-execution","title":"Running code in an integration","sidebar_label":"Running code in an integration","keywords":["code execution","integration code","javascript execution","tooljump code","integration runtime"],"description":"Understand how ToolJump executes integration code, including security considerations, runtime environment, and best practices for code execution."},"sidebar":"docsSidebar","previous":{"title":"Generic context","permalink":"/docs/writing-integrations/generic-context"},"next":{"title":"Caching","permalink":"/docs/writing-integrations/caching"}}');var o=i(74848),r=i(28453);const s={id:"integrations-code-execution",title:"Running code in an integration",sidebar_label:"Running code in an integration",keywords:["code execution","integration code","javascript execution","tooljump code","integration runtime"],description:"Understand how ToolJump executes integration code, including security considerations, runtime environment, and best practices for code execution."},c="Running code in an integration",a={},d=[{value:"Importing modules",id:"importing-modules",level:2},{value:"Logging",id:"logging",level:2},{value:"Cache",id:"cache",level:2},{value:"Limits",id:"limits",level:2},{value:"Timeout",id:"timeout",level:3},{value:"Next Steps",id:"next-steps",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"running-code-in-an-integration",children:"Running code in an integration"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"run"})," method in every integration executes when ToolJump matches your integration to the current context."]}),"\n",(0,o.jsxs)(n.p,{children:["In ",(0,o.jsx)(n.code,{children:"run"}),", write the code that connects tools across your organization. The method is async, so you can ",(0,o.jsx)(n.code,{children:"await"})," I/O such as HTTP requests or SDK calls."]}),"\n",(0,o.jsxs)(n.p,{children:["Your code is JavaScript executed in a sandboxed VM. See the server architecture for details: ",(0,o.jsx)(n.a,{href:"/docs/server-architecture",children:"Server Architecture"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Here are a few things to keep in mind when writing integration code:"}),"\n",(0,o.jsx)(n.h2,{id:"importing-modules",children:"Importing modules"}),"\n",(0,o.jsxs)(n.p,{children:["Use ",(0,o.jsx)(n.code,{children:"require"})," to import modules that are declared in the ToolJump server's ",(0,o.jsx)(n.code,{children:"package.json"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["If you need a tool SDK or npm package (e.g., ",(0,o.jsx)(n.code,{children:"@aws-sdk/client-s3"}),"), add it to ToolJump\u2019s ",(0,o.jsx)(n.code,{children:"package.json"}),", then ",(0,o.jsx)(n.code,{children:"require"})," it in your integration."]}),"\n",(0,o.jsxs)(n.p,{children:["To make http requests to various endpoints, you can use the ",(0,o.jsx)(n.code,{children:"fetch"})," native function."]}),"\n",(0,o.jsxs)(n.p,{children:["If you want to share code between integrations, create JavaScript modules and export functions or values using ",(0,o.jsx)(n.code,{children:"module.exports"}),". Shared modules should not include ",(0,o.jsx)(n.code,{children:".integration."})," in the filename; otherwise ToolJump will try to load them as integrations."]}),"\n",(0,o.jsx)(n.h2,{id:"logging",children:"Logging"}),"\n",(0,o.jsxs)(n.p,{children:["ToolJump provides a ",(0,o.jsx)(n.code,{children:"logger"})," object to every integration. Log messages are emitted by the ToolJump server and can be forwarded to your monitoring tools."]}),"\n",(0,o.jsx)(n.p,{children:"The logger object supports both structured and non-structured logging."}),"\n",(0,o.jsx)(n.p,{children:"Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"logger.debug({ totalCost, days }, 'Successfully retrieved costs from AWS'); // message + structured data\nlogger.warn('Error reading from GitHub'); // plain message\n"})}),"\n",(0,o.jsx)(n.p,{children:"You can use the usual methods: debug, info, warn, error."}),"\n",(0,o.jsx)(n.h2,{id:"cache",children:"Cache"}),"\n",(0,o.jsxs)(n.p,{children:["A global ",(0,o.jsx)(n.code,{children:"cache"})," object is available in integration code for operation-level caching. This is the same cache instance used by ToolJump for integration result caching and is namespaced per integration automatically."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["get: ",(0,o.jsx)(n.code,{children:"await cache.get(key)"}),"  -  returns the cached value or ",(0,o.jsx)(n.code,{children:"undefined"})]}),"\n",(0,o.jsxs)(n.li,{children:["set: ",(0,o.jsx)(n.code,{children:"await cache.set(key, value, ttlSeconds)"}),"  -  stores a value with an explicit TTL in seconds"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Keys are automatically prefixed with your integration name, so you only provide the logical key:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// Example inside run() method\nconst usersKey = `org:${context.orgId}:users`;\nlet users = await cache.get(usersKey);\nif (!users) {\n  users = await fetchUsersFromAPI();\n  await cache.set(usersKey, users, 300); // cache 5 minutes\n}\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"cache"})," object is available in required modules as well."]})}),"\n",(0,o.jsx)(n.h2,{id:"limits",children:"Limits"}),"\n",(0,o.jsx)(n.h3,{id:"timeout",children:"Timeout"}),"\n",(0,o.jsx)(n.p,{children:"Every integration will be automatically cancelled if it takes more than 5 seconds to run."}),"\n",(0,o.jsx)(n.p,{children:"This is done to improve user experience and to prevent one integration to block others to load."}),"\n",(0,o.jsx)(n.p,{children:"Here are some ideas on how you can mitigate this:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Instead of doing everything in a single integration, split between integrations. In this way, every integration provides one or two insights, and it doesn't risk timing out."}),"\n",(0,o.jsx)(n.li,{children:"Use caching for longer running operations, so only the first user that accesses that information waits for it"}),"\n",(0,o.jsx)(n.li,{children:"Pre-cache the most expensive operations from a process outside ToolJump so that expensive data is always cached and fresh"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,o.jsx)(n.p,{children:"Now that you understand what you can and cannot run inside an integration, learn about:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"/docs/writing-integrations/caching",children:"Caching"})})," - Optimize performance and reduce latency"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"/docs/writing-integrations/secrets",children:"Secrets"})})," - Manage sensitive configuration safely"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"/docs/writing-integrations/data",children:"Data"})})," - Work with external data and files"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"/docs/writing-integrations/debugging",children:"Debugging"})})," - Troubleshoot integrations effectively"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);
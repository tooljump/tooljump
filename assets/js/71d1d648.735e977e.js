"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1140],{27615:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"recipes/connecting-to-azure","title":"Connecting to Azure","description":"Learn how to connect Microsoft Azure services with ToolJump including Azure Functions, App Service, and other Azure resources for improved workflow.","source":"@site/docs/recipes/connecting-to-azure.md","sourceDirName":"recipes","slug":"/recipes/connecting-to-azure","permalink":"/docs/recipes/connecting-to-azure","draft":false,"unlisted":false,"editUrl":"https://github.com/tooljump/tooljump/tree/main/docs/docs/recipes/connecting-to-azure.md","tags":[],"version":"current","frontMatter":{"id":"connecting-to-azure","title":"Connecting to Azure","keywords":["connecting to azure","microsoft azure","azure integration","cloud integration","tooljump azure"],"description":"Learn how to connect Microsoft Azure services with ToolJump including Azure Functions, App Service, and other Azure resources for improved workflow."},"sidebar":"docsSidebar","previous":{"title":"Connecting to GCP","permalink":"/docs/recipes/connecting-to-gcp"},"next":{"title":"Connecting to GitHub","permalink":"/docs/recipes/connecting-to-github"}}');var t=r(74848),o=r(28453);const s={id:"connecting-to-azure",title:"Connecting to Azure",keywords:["connecting to azure","microsoft azure","azure integration","cloud integration","tooljump azure"],description:"Learn how to connect Microsoft Azure services with ToolJump including Azure Functions, App Service, and other Azure resources for improved workflow."},c="Connecting to Azure",a={},l=[{value:"Correlating other tools with Azure",id:"correlating-other-tools-with-azure",level:2},{value:"Authenticating to Azure",id:"authenticating-to-azure",level:2},{value:"Option 1: Give ToolJump access to the resources you need",id:"option-1-give-tooljump-access-to-the-resources-you-need",level:3},{value:"How It Works",id:"how-it-works",level:4},{value:"Benefits",id:"benefits",level:4},{value:"Example: Accessing Azure Blob Storage with DAC (Node.js)",id:"example-accessing-azure-blob-storage-with-dac-nodejs",level:4},{value:"Option 2: Cross\u2011subscription/project RBAC or Workload Identity Federation",id:"option-2-crosssubscriptionproject-rbac-or-workload-identity-federation",level:3},{value:"How It Works",id:"how-it-works-1",level:4},{value:"Benefits",id:"benefits-1",level:4},{value:"Example: RBAC role assignment (conceptual)",id:"example-rbac-role-assignment-conceptual",level:5},{value:"Example: Caller Code (Node.js, DAC)",id:"example-caller-code-nodejs-dac",level:5},{value:"Option 3: Service Principal with Client Secret (Fixed Credentials)",id:"option-3-service-principal-with-client-secret-fixed-credentials",level:3},{value:"How It Works",id:"how-it-works-2",level:4},{value:"Risks",id:"risks",level:4},{value:"Hardening Measures",id:"hardening-measures",level:4},{value:"Example: Usage in Node.js (Client secret)",id:"example-usage-in-nodejs-client-secret",level:4},{value:"Using the Azure SDK to retrieve data from Azure",id:"using-the-azure-sdk-to-retrieve-data-from-azure",level:2}];function d(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"connecting-to-azure",children:"Connecting to Azure"})}),"\n",(0,t.jsx)(n.p,{children:"Microsoft Azure is a scalable, on\u2011demand cloud computing platform."}),"\n",(0,t.jsx)(n.h2,{id:"correlating-other-tools-with-azure",children:"Correlating other tools with Azure"}),"\n",(0,t.jsx)(n.p,{children:"Suggested reading: Best practices for uniformly tagging and correlating resources across your organization."}),"\n",(0,t.jsxs)(n.p,{children:["In order to best leverage Azure, your infrastructure and other tools must be properly tagged so that they can be easily found in Azure (Azure resources support key/value ",(0,t.jsx)(n.code,{children:"tags"}),")."]}),"\n",(0,t.jsxs)(n.p,{children:['For example, any infrastructure for the "webshop" service should be tagged with ',(0,t.jsx)(n.code,{children:"service=webshop"})," and ",(0,t.jsx)(n.code,{children:"repository=company/webshop"})," so you can easily identify them."]}),"\n",(0,t.jsx)(n.h2,{id:"authenticating-to-azure",children:"Authenticating to Azure"}),"\n",(0,t.jsx)(n.p,{children:"Depending on your situation, there are a number of approaches you can use, all with pros and cons. Carefully review the options below and choose the one that best fits your scenario:"}),"\n",(0,t.jsx)(n.h3,{id:"option-1-give-tooljump-access-to-the-resources-you-need",children:"Option 1: Give ToolJump access to the resources you need"}),"\n",(0,t.jsx)(n.p,{children:"Use this if:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u2705 ToolJump runs in Azure and all resources you are interested in are in the same tenant/subscription"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["When your service runs ",(0,t.jsx)(n.strong,{children:"inside Azure"})," (VM, App Service, Functions, Container Apps, AKS), you don\u2019t need any long\u2011lived secrets.",(0,t.jsx)(n.br,{}),"\n","Instead, you attach a ",(0,t.jsx)(n.strong,{children:"Managed Identity"})," (system\u2011assigned or user\u2011assigned) to the compute resource. Azure automatically provides ",(0,t.jsx)(n.strong,{children:"short\u2011lived tokens"})," via the Instance Metadata Service (IMDS), and Azure SDKs use ",(0,t.jsx)(n.strong,{children:"DefaultAzureCredential"})," to obtain and refresh these credentials automatically."]}),"\n",(0,t.jsx)(n.h4,{id:"how-it-works",children:"How It Works"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Azure VM / App Service / Functions / Container Apps"}),": enable a ",(0,t.jsx)(n.strong,{children:"Managed Identity"})," on the resource and grant it the minimal RBAC roles on target resources (e.g., Storage Blob Data Reader)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"AKS"}),": use ",(0,t.jsx)(n.strong,{children:"Azure AD Workload Identity"})," to bind a Kubernetes service account to an Entra ID application/managed identity."]}),"\n",(0,t.jsxs)(n.li,{children:["Client libraries automatically use ",(0,t.jsx)(n.strong,{children:"DefaultAzureCredential (DAC)"}),"; no explicit secrets in code."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"benefits",children:"Benefits"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No long\u2011lived client secrets or keys."}),"\n",(0,t.jsx)(n.li,{children:"Automatic rotation of short\u2011lived tokens."}),"\n",(0,t.jsx)(n.li,{children:"Least\u2011privilege access via scoped RBAC roles."}),"\n",(0,t.jsx)(n.li,{children:"Easy to revoke by removing role assignments or the identity."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-accessing-azure-blob-storage-with-dac-nodejs",children:"Example: Accessing Azure Blob Storage with DAC (Node.js)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'import { DefaultAzureCredential } from "@azure/identity";\nimport { BlobServiceClient } from "@azure/storage-blob";\n\nconst accountName = "myaccount";\nconst containerName = "my-container";\nconst prefix = "read-prefix/";\n\nconst credential = new DefaultAzureCredential();\nconst blobService = new BlobServiceClient(`https://${accountName}.blob.core.windows.net`, credential);\nconst container = blobService.getContainerClient(containerName);\n\nconst names = [];\nfor await (const blob of container.listBlobsFlat({ prefix })) {\n  names.push(blob.name);\n}\nconsole.log(names);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"option-2-crosssubscriptionproject-rbac-or-workload-identity-federation",children:"Option 2: Cross\u2011subscription/project RBAC or Workload Identity Federation"}),"\n",(0,t.jsx)(n.p,{children:"Use this option if all the following are true:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u2705 You have multiple subscriptions or resource groups"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 ToolJump runs in one scope but needs to read from another"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["You can grant access without creating long\u2011lived secrets by either assigning RBAC on the target scope to the caller\u2019s identity, or by using ",(0,t.jsx)(n.strong,{children:"Workload Identity Federation"})," to obtain short\u2011lived tokens for a target app identity."]}),"\n",(0,t.jsx)(n.h4,{id:"how-it-works-1",children:"How It Works"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["In the ",(0,t.jsx)(n.strong,{children:"target subscription/resource group/resource"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Option A (direct RBAC): Assign minimal roles (e.g., ",(0,t.jsx)(n.code,{children:"Storage Blob Data Reader"}),") to the caller\u2019s managed identity or app registration principal."]}),"\n",(0,t.jsxs)(n.li,{children:["Option B (federation): Configure an Entra ID application with ",(0,t.jsx)(n.strong,{children:"federated credentials"})," and grant it minimal roles on the target resources; allow the caller workload to obtain short\u2011lived tokens for that app (DefaultAzureCredential supports this in AKS/Workload Identity scenarios)."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["In the ",(0,t.jsx)(n.strong,{children:"caller environment"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.strong,{children:"DefaultAzureCredential"}),"; it automatically exchanges tokens when federation is configured, or uses the caller\u2019s managed identity when direct RBAC is used."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"benefits-1",children:"Benefits"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No long\u2011lived secrets."}),"\n",(0,t.jsx)(n.li,{children:"Short\u2011lived, time\u2011boxed credentials."}),"\n",(0,t.jsx)(n.li,{children:"Easy to revoke by removing RBAC or federation bindings."}),"\n",(0,t.jsx)(n.li,{children:"Least\u2011privilege access with fine\u2011grained roles."}),"\n"]}),"\n",(0,t.jsx)(n.h5,{id:"example-rbac-role-assignment-conceptual",children:"Example: RBAC role assignment (conceptual)"}),"\n",(0,t.jsx)(n.p,{children:"Grant the ToolJump identity read access to a storage account scope:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "roleDefinition": "Storage Blob Data Reader",\n  "principalId": "<object-id-of-caller-identity>",\n  "scope": "/subscriptions/<sub>/resourceGroups/<rg>/providers/Microsoft.Storage/storageAccounts/<account>"\n}\n'})}),"\n",(0,t.jsx)(n.h5,{id:"example-caller-code-nodejs-dac",children:"Example: Caller Code (Node.js, DAC)"}),"\n",(0,t.jsx)(n.p,{children:"With either direct RBAC or federation configured, code remains the same:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'import { DefaultAzureCredential } from "@azure/identity";\nimport { BlobServiceClient } from "@azure/storage-blob";\n\nconst credential = new DefaultAzureCredential();\nconst blobService = new BlobServiceClient(`https://myaccount.blob.core.windows.net`, credential);\nconst container = blobService.getContainerClient("my-container");\n\nfor await (const blob of container.listBlobsFlat({ prefix: "read-prefix/" })) {\n  console.log(blob.name);\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"option-3-service-principal-with-client-secret-fixed-credentials",children:"Option 3: Service Principal with Client Secret (Fixed Credentials)"}),"\n",(0,t.jsxs)(n.p,{children:["If none of the identity\u2011based solutions are possible, you can create an ",(0,t.jsx)(n.strong,{children:"Entra ID application (service principal)"})," with a client secret or certificate.",(0,t.jsx)(n.br,{}),"\n","This approach should only be used as a ",(0,t.jsx)(n.strong,{children:"last resort"}),", because long\u2011lived secrets are hard to rotate and carry higher security risks."]}),"\n",(0,t.jsx)(n.h4,{id:"how-it-works-2",children:"How It Works"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Register an application in Entra ID and create a ",(0,t.jsx)(n.strong,{children:"client secret"})," (or certificate)."]}),"\n",(0,t.jsx)(n.li,{children:"Grant the app minimal RBAC roles on the resources."}),"\n",(0,t.jsx)(n.li,{children:"Store the secret securely (e.g., in a secrets manager or vault)."}),"\n",(0,t.jsxs)(n.li,{children:["The backend can use ",(0,t.jsx)(n.code,{children:"ClientSecretCredential"})," or ",(0,t.jsx)(n.code,{children:"DefaultAzureCredential"})," via environment variables."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"risks",children:"Risks"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u274c Long\u2011lived secrets can be leaked or compromised."}),"\n",(0,t.jsx)(n.li,{children:"\u274c Secret rotation is manual and error\u2011prone."}),"\n",(0,t.jsx)(n.li,{children:"\u274c Harder to revoke quickly compared to managed identities."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"hardening-measures",children:"Hardening Measures"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Grant ",(0,t.jsx)(n.strong,{children:"minimal roles"}),"; avoid broad, subscription\u2011wide reader roles unless necessary."]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.strong,{children:"management group policies"})," and ",(0,t.jsx)(n.strong,{children:"Azure Policy"})," to constrain behavior."]}),"\n",(0,t.jsxs)(n.li,{children:["Restrict access to the secret; monitor with ",(0,t.jsx)(n.strong,{children:"Azure Activity Logs"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Rotate secrets frequently (e.g., every 30 - 60 days)."}),"\n",(0,t.jsxs)(n.li,{children:["Store secrets in a ",(0,t.jsx)(n.strong,{children:"secrets manager"}),", for example in ",(0,t.jsx)(n.code,{children:"@tooljump/secrets-env"}),". More information ",(0,t.jsx)(n.a,{href:"/docs/writing-integrations/secrets",children:"here"})]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-usage-in-nodejs-client-secret",children:"Example: Usage in Node.js (Client secret)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'import { ClientSecretCredential } from "@azure/identity";\nimport { BlobServiceClient } from "@azure/storage-blob";\n\nconst tenantId = process.env.AZURE_TENANT_ID!;\nconst clientId = process.env.AZURE_CLIENT_ID!;\nconst clientSecret = process.env.AZURE_CLIENT_SECRET!;\n\nconst credential = new ClientSecretCredential(tenantId, clientId, clientSecret);\nconst blobService = new BlobServiceClient(`https://myaccount.blob.core.windows.net`, credential);\nconst container = blobService.getContainerClient("my-container");\n\nconst names = [];\nfor await (const blob of container.listBlobsFlat({ prefix: "read-prefix/" })) {\n  names.push(blob.name);\n}\nconsole.log(names);\n'})}),"\n",(0,t.jsx)(n.h2,{id:"using-the-azure-sdk-to-retrieve-data-from-azure",children:"Using the Azure SDK to retrieve data from Azure"}),"\n",(0,t.jsxs)(n.p,{children:["To retrieve data from Azure, use the official Azure SDKs with ",(0,t.jsx)(n.code,{children:"@azure/identity"})," (for credentials) and the corresponding service client libraries (e.g., ",(0,t.jsx)(n.code,{children:"@azure/storage-blob"}),", ",(0,t.jsx)(n.code,{children:"@azure/arm-resources"}),", ",(0,t.jsx)(n.code,{children:"@azure/monitor-query"}),"). Prefer ",(0,t.jsx)(n.code,{children:"DefaultAzureCredential"})," for production to benefit from managed identity or workload identity where available."]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>c});var i=r(96540);const t={},o=i.createContext(t);function s(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);
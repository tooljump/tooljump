"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9675],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var i=t(96540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}},35376:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"writing-integrations/when-to-run","title":"When to Run (and contexts)","description":"Learn when and where ToolJump integrations execute using context matching. Understand how to control integration behavior based on page content and URLs.","source":"@site/docs/writing-integrations/when-to-run.md","sourceDirName":"writing-integrations","slug":"/writing-integrations/when-to-run","permalink":"/docs/writing-integrations/when-to-run","draft":false,"unlisted":false,"editUrl":"https://github.com/tooljump/tooljump/tree/main/docs/docs/writing-integrations/when-to-run.md","tags":[],"version":"current","frontMatter":{"id":"when-to-run","title":"When to Run (and contexts)","keywords":["when to run","integration contexts","context matching","integration triggers","tooljump contexts"],"description":"Learn when and where ToolJump integrations execute using context matching. Understand how to control integration behavior based on page content and URLs."},"sidebar":"docsSidebar","previous":{"title":"Result types","permalink":"/docs/writing-integrations/result-types"},"next":{"title":"Generic context","permalink":"/docs/writing-integrations/generic-context"}}');var r=t(74848),s=t(28453);const o={id:"when-to-run",title:"When to Run (and contexts)",keywords:["when to run","integration contexts","context matching","integration triggers","tooljump contexts"],description:"Learn when and where ToolJump integrations execute using context matching. Understand how to control integration behavior based on page content and URLs."},c="When to Run",a={},l=[{value:"Context Data",id:"context-data",level:2},{value:"Context Matching",id:"context-matching",level:2},{value:"Context Types",id:"context-types",level:2},{value:"Context Rules",id:"context-rules",level:2},{value:"URL Matching",id:"url-matching",level:3},{value:"Advanced Matching",id:"advanced-matching",level:2},{value:"Multiple Conditions",id:"multiple-conditions",level:3},{value:"Matching via code",id:"matching-via-code",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Be Specific",id:"1-be-specific",level:3},{value:"2. Use Appropriate Context Types",id:"2-use-appropriate-context-types",level:3},{value:"3. Split your code across multiple integrations",id:"3-split-your-code-across-multiple-integrations",level:3},{value:"Complete Example",id:"complete-example",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"when-to-run",children:"When to Run"})}),"\n",(0,r.jsxs)(n.p,{children:["Integrations only execute when they match specific contexts. The ",(0,r.jsx)(n.code,{children:"match"})," property in your metadata controls when and where your integration runs."]}),"\n",(0,r.jsxs)(n.p,{children:["Read the ",(0,r.jsx)(n.a,{href:"/docs/core-concepts#1-contexts",children:"contexts documentation"})," to understand what they are and how they work."]}),"\n",(0,r.jsx)(n.h2,{id:"context-data",children:"Context Data"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["The full context object is always available as the first parameter of the ",(0,r.jsx)(n.code,{children:"run"})," function"]})}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"run: async function (context, secrets = {}, dataFiles = []) {\n    // Current URL\n    logger.info('Current URL:', context.url);\n    \n    // Page title\n    logger.info('Page title:', context.page?.title);\n    \n    // Repository information (GitHub context)\n    if (context.page?.repository) {\n        logger.info('Repository:', context.page.repository);\n        logger.info('Owner:', context.page.user);\n    }\n    \n    // User information\n    if (context.user) {\n        logger.info('User ID:', context.user.id);\n        logger.info('Username:', context.user.username);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"context-matching",children:"Context Matching"}),"\n",(0,r.jsxs)(n.p,{children:["In order to ensure your integration only runs under a specific set of conditions, you can use the ",(0,r.jsx)(n.code,{children:"match"})," property, which has two main components:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"match: {\n    contextType: 'github',            // What type of context\n    context: { /* specific rules */ } // When to run\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"context-types",children:"Context Types"}),"\n",(0,r.jsx)(n.p,{children:"Context types define on which websites the integration runs"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"'github'"})," - GitHub website"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"'aws'"})," - AWS console website"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"'generic'"})," - Any other website"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"context-rules",children:"Context Rules"}),"\n",(0,r.jsx)(n.p,{children:"Context rules use operators to match specific conditions:"}),"\n",(0,r.jsxs)(n.p,{children:["For example, for the ",(0,r.jsx)(n.code,{children:"github"})," context, you can use the following expression to only run the integration on all repositories hosted by Microsoft:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"match: {\n    contextType: 'github',\n    context: {\n        'page.repository': { startsWith: 'microsoft/' },\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"url-matching",children:"URL Matching"}),"\n",(0,r.jsx)(n.p,{children:"For the generic context, which only provides the url, we can use the url matching, like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"match: {\n    contextType: 'generic',\n    context: {\n        url: { startsWith: 'https://some-website.com/' }\n    }\n}\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsx)(n.p,{children:"If you have at least one integration using a generic adapter, you need to manually allow the extension to run on that page."})}),"\n",(0,r.jsx)(n.p,{children:"The integration will only run on the some-website.com domain."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Available URL operators:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"startsWith"})," - URL begins with a specific string"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"endsWith"})," - URL ends with a specific string"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pattern"})," - URL matches a regular expression"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Available data operators:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"exists"})," - Property exists (true/false)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"equals"})," - Property equals a specific value"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"in"})," - Property is in an array of values"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pattern"})," - Property matches a regular expression"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"advanced-matching",children:"Advanced Matching"}),"\n",(0,r.jsx)(n.h3,{id:"multiple-conditions",children:"Multiple Conditions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"match: {\n    contextType: 'github',\n    context: {\n        'page.repository': { in: ['my-org/repo1', 'my-org/repo2', 'my-org/repo3'] },\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"What it means:"})," Run on GitHub pages with repositories owned by specific users or orgs. Useful for only running ToolJump on your GitHub org."]}),"\n",(0,r.jsx)(n.h3,{id:"matching-via-code",children:"Matching via code"}),"\n",(0,r.jsxs)(n.p,{children:["Sometimes, using matchers as expressions might not be expressive enough. Whenever that's the case, you can use the ",(0,r.jsx)(n.code,{children:"shouldRun"})," method in the integration and return ",(0,r.jsx)(n.code,{children:"true"})," or ",(0,r.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// show integration only after 4pm (useful when you need to run an integration depending on the moment of the day)\n    // operation that can only be performed by code\n    const now = new Date();\n    if (now.getHours() >= 16) {\n        return true;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"1-be-specific",children:"1. Be Specific"}),"\n",(0,r.jsxs)(n.p,{children:["\u274c ",(0,r.jsx)(n.strong,{children:"Too broad:"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"match: {\n    contextType: 'generic',\n    context: {}\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Better:"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Run this integration on any repository page\nmatch: {\n    contextType: 'github',\n    context: {\n        'page.repository': { startsWith: 'my-org/' }\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-use-appropriate-context-types",children:"2. Use Appropriate Context Types"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"'generic'"})," for general web pages"]}),"\n",(0,r.jsxs)(n.li,{children:["Use specific types like ",(0,r.jsx)(n.code,{children:"'github'"})," when available"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"3-split-your-code-across-multiple-integrations",children:"3. Split your code across multiple integrations"}),"\n",(0,r.jsxs)(n.p,{children:["When integrating multiple tools, the recommended approach is to split the code across multiple integrations that share the same ",(0,r.jsx)(n.code,{children:"match"})," criteria."]}),"\n",(0,r.jsx)(n.p,{children:"For example, you can create three integrations with identical context type and match conditions:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"One integration for Datadog alerts and logs"}),"\n",(0,r.jsx)(n.li,{children:"One integration for last deployment information"}),"\n",(0,r.jsx)(n.li,{children:"One integration for public service URLs"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"ToolJump will execute all matching integrations, aggregate their results, and present the combined output to users."}),"\n",(0,r.jsx)(n.p,{children:"Splitting code across multiple integrations provides several advantages:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fault isolation"}),": If one integration fails, the remaining integrations continue to function"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Code maintainability"}),": Smaller, focused codebases are easier to understand and maintain"]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["The order in which the integration results are displayed to the user is decided by the ",(0,r.jsx)(n.code,{children:"priority"})," parameter from the ",(0,r.jsx)(n.code,{children:"metadata"})," section. The higher priority are displayed first, the lower later."]})}),"\n",(0,r.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,r.jsx)(n.p,{children:"Here's a well-structured context match:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"module.exports = {\n    metadata: {\n        name: 'repo-stats',\n        description: 'Show repository statistics',\n        match: {\n            contextType: 'github',\n            context: {\n                'page.repository': { exists: true },\n                'page.user': { exists: true } // only show when a user is logged in to Github\n            }\n        }\n    },\n    run: async function (context, secrets = {}, dataFiles = []) {\n        // This will only run on GitHub repository pages\n        const repo = context.page.repository;\n        const user = context.page.user;\n        \n        // Your integration logic here\n    }\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsx)(n.p,{children:"Now that you understand context matching, learn about:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/docs/writing-integrations/generic-context",children:"Generic Context"})})," - Optimizing performance"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/docs/writing-integrations/caching",children:"Caching"})})," - Optimizing performance"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/docs/writing-integrations/secrets",children:"Secrets"})})," - Managing configuration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/docs/writing-integrations/result-types",children:"Result Types"})})," - What to return"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["See these concepts applied in our ",(0,r.jsx)(n.a,{href:"/integrations",children:"integration examples"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3733],{28453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>r});var t=a(96540);const i={},s=t.createContext(i);function o(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(s.Provider,{value:n},e.children)}},91320:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>g,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"writing-integrations/data","title":"Data","description":"Learn how to fetch and work with data in ToolJump integrations, including API calls, data transformation, and handling external data sources.","source":"@site/docs/writing-integrations/data.md","sourceDirName":"writing-integrations","slug":"/writing-integrations/data","permalink":"/docs/writing-integrations/data","draft":false,"unlisted":false,"editUrl":"https://github.com/tooljump/tooljump/tree/main/docs/docs/writing-integrations/data.md","tags":[],"version":"current","frontMatter":{"id":"data","title":"Data","sidebar_label":"Data","keywords":["integration data","data sources","data fetching","tooljump data","external data"],"description":"Learn how to fetch and work with data in ToolJump integrations, including API calls, data transformation, and handling external data sources."},"sidebar":"docsSidebar","previous":{"title":"Secrets","permalink":"/docs/writing-integrations/secrets"},"next":{"title":"Debugging","permalink":"/docs/writing-integrations/debugging"}}');var i=a(74848),s=a(28453);const o={id:"data",title:"Data",sidebar_label:"Data",keywords:["integration data","data sources","data fetching","tooljump data","external data"],description:"Learn how to fetch and work with data in ToolJump integrations, including API calls, data transformation, and handling external data sources."},r="Data",c={},l=[{value:"Introducing Data Files",id:"introducing-data-files",level:2},{value:"Working with Data Files",id:"working-with-data-files",level:3},{value:"Examples",id:"examples",level:3},{value:"Normalizing names across services",id:"normalizing-names-across-services",level:4},{value:"Normalize GitHub usernames with corporate emails",id:"normalize-github-usernames-with-corporate-emails",level:4},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"data",children:"Data"})}),"\n",(0,i.jsxs)(n.p,{children:["Integrations work with several kinds of data: the current ",(0,i.jsx)(n.strong,{children:"context"}),", data from ",(0,i.jsx)(n.strong,{children:"external APIs"}),", and local ",(0,i.jsx)(n.strong,{children:"data files"}),". Understanding how to access and combine these sources is essential for building powerful integrations."]}),"\n",(0,i.jsx)(n.p,{children:"As you link tools together, you will need to store the mapping information in a way or another."}),"\n",(0,i.jsxs)(n.p,{children:["If you already use a service catalog ",(0,i.jsx)(n.em,{children:"(eg: Datadog Service Catalog)"}),", you can make use of it by querying it from your integration. One example can be: ",(0,i.jsx)(n.em,{children:'"What is the team for this repository or service?"'})," or ",(0,i.jsx)(n.em,{children:'"What are the SLOs for this service?"'})]}),"\n",(0,i.jsx)(n.p,{children:"However, not every organization uses a service catalog, so ToolJump provides a simple way to ship data along with your integrations."}),"\n",(0,i.jsx)(n.h2,{id:"introducing-data-files",children:"Introducing Data Files"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"dataFiles"})," parameter provides access to local configuration and mapping files. JSON and YAML files are pre\u2011parsed into JavaScript objects."]}),"\n",(0,i.jsx)(n.h3,{id:"working-with-data-files",children:"Working with Data Files"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"run: async function (context, secrets = {}, dataFiles = []) {\n    // Access data files by id\n    const config = dataFiles.find(file => file.id === 'config');\n    const users = dataFiles.find(file => file.id === 'users');\n    \n    // Contents are already parsed for .json/.yml\n    logger.info(config.data);\n    logger.info(users.data);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.h4,{id:"normalizing-names-across-services",children:"Normalizing names across services"}),"\n",(0,i.jsx)(n.p,{children:"Let's assume a given service is present across multiple tools, but due to legacy reasons, it appears under different names."}),"\n",(0,i.jsx)(n.p,{children:"Of course, the best course of action would be to rename it so it becomes consistent, but given the complexities of this effort, this could take months."}),"\n",(0,i.jsxs)(n.p,{children:["Create a ",(0,i.jsx)(n.code,{children:"config.data.json"})," file storing mappings between systems, and use it from your integration to normalize references."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// config.data.json\n{\n    "mappings": [\n        {\n            "systemA": "webshop",\n            "systemB": "web-shop"\n        },\n        {\n            "systemA": "notifier",\n            "systemB": "notification-service"\n        }\n    ]\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"In an integration:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"run: async function (context, secrets = {}, dataFiles = []) {\n    const config = dataFiles.find(file => file.id === 'config');\n    \n    console.log(config.data.mappings); // outputs the mappings array\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"normalize-github-usernames-with-corporate-emails",children:"Normalize GitHub usernames with corporate emails"}),"\n",(0,i.jsx)(n.p,{children:"If a company did not have a formal GitHub user creation policy (e.g., only allowing corporate email accounts), mapping GitHub usernames to corporate identities can be difficult."}),"\n",(0,i.jsx)(n.p,{children:"We can solve this easily with a mapping:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// users.data.json\n{\n  "mappings": {\n    "j0hn": "john@company.com",\n    "the_wizard": "mike@company.com"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"In a GitHub integration:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"run: async function (context, secrets = {}, dataFiles = []) {\n    const users = dataFiles.find(file => file.id === 'users');\n    const githubLoggedInUser = context.global.user;\n\n    if (!githubLoggedInUser) {\n      return [];\n    }\n\n    const companyEmail = users.data.mappings[githubLoggedInUser];\n    \n    // now you can use the company email to identify the user in another tool\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(n.p,{children:"Now that you understand data handling, learn how to debug integrations when things don\u2019t go as expected:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/docs/writing-integrations/debugging",children:"Debugging"})})," - Techniques and common issues"]}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);
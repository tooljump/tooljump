name: Publish Packages to GitHub Packages

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch: # Manual trigger

jobs:
  publish-packages:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify GitHub Token Permissions
        run: |
          echo "🔍 Verifying GitHub token permissions..."
          
          # Test if we can access the repository
          curl -H "Authorization: token ${{ secrets.NPM_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/${{ github.repository }} || echo "❌ Cannot access repository"
          
          # Test if we can access packages
          curl -H "Authorization: token ${{ secrets.NPM_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/user/packages || echo "❌ Cannot access packages"
          
          echo "✅ Token permission check completed"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@tooljump'
          token: '${{ secrets.NPM_TOKEN }}'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Verify workspace setup
        run: |
          echo "📦 Workspace packages:"
          yarn workspaces info
          echo ""
          echo "🧪 Testing package resolution:"
          node -e "
            const fs = require('fs');
            const path = require('path');
            
            // Discover all @tooljump packages dynamically
            const packagesDir = path.join(process.cwd(), 'packages');
            const packages = fs.readdirSync(packagesDir, { withFileTypes: true })
              .filter(dirent => dirent.isDirectory())
              .map(dirent => {
                const packageJsonPath = path.join(packagesDir, dirent.name, 'package.json');
                if (fs.existsSync(packageJsonPath)) {
                  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
                  return packageJson.name;
                }
                return null;
              })
              .filter(name => name && name.startsWith('@tooljump/'));
            
            console.log('📦 Discovered packages:');
            packages.forEach(pkg => {
              try {
                require.resolve(pkg);
                console.log('✅ ' + pkg);
              } catch (e) {
                console.log('❌ ' + pkg + ' - ' + e.message);
              }
            });
          "

      - name: Build all packages
        run: |
          # Get all @tooljump packages and build them using Lerna's dependency sorting
          echo "🔨 Building all packages in dependency order..."
          yarn lerna run build --sort

      - name: Configure npm for GitHub Packages
        run: |
          # Configure npm to use GitHub Packages for @tooljump scope
          npm config set @tooljump:registry https://npm.pkg.github.com
          npm config set //npm.pkg.github.com/:_authToken ${{ secrets.NPM_TOKEN }}
          # npm config set //npm.pkg.github.com/:always-auth true
          
          # Create .npmrc file for better authentication
          echo "@tooljump:registry=https://npm.pkg.github.com" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.NPM_TOKEN }}" >> .npmrc
          echo "//npm.pkg.github.com/:always-auth=true" >> .npmrc
          
          # Test authentication
          echo "🔐 Testing authentication..."
          npm whoami --registry=https://npm.pkg.github.com || echo "❌ Authentication failed"

      - name: Publish packages
        run: |
          # Discover and publish all @tooljump packages
          cd packages
          for package in */; do
            if [ -f "$package/package.json" ]; then
              # Check if it's a @tooljump package
              package_name=$(node -e "console.log(require('./$package/package.json').name)")
              if [[ "$package_name" == @tooljump/* ]]; then
                echo "📦 Publishing $package_name..."
                cd "$package"
                
                # Verify the package is built
                if [ ! -d "dist" ]; then
                  echo "❌ Package $package_name is not built. Skipping..."
                  cd ..
                  continue
                fi
                
                # Check if package already exists at this version
                version=$(node -e "console.log(require('./package.json').version)")
                echo "🔍 Checking if $package_name@$version already exists..."
                
                if npm view "$package_name@$version" --registry=https://npm.pkg.github.com > /dev/null 2>&1; then
                  echo "⚠️  Package $package_name@$version already exists. Skipping..."
                  cd ..
                  continue
                fi
                
                # Publish the package using npm (since we're publishing to GitHub Packages)
                echo "🚀 Publishing $package_name@$version..."
                echo "📁 Current directory: $(pwd)"
                echo "📦 Package.json contents:"
                cat package.json
                echo ""
                echo "🔧 Registry configuration:"
                echo "Registry: https://npm.pkg.github.com"
                echo "Scope: @tooljump"
                echo ""
                
                npm publish --access restricted --registry=https://npm.pkg.github.com --verbose
                
                cd ..
              fi
            fi
          done

      - name: Show publish summary
        run: |
          echo "✅ All packages published successfully to GitHub Packages!"
          echo "📦 Packages published as private packages"
          echo "🔒 Access: Restricted (private)"
          echo "🏢 Registry: https://npm.pkg.github.com" 